module semantics/interpret

imports
  src-gen/ds-signatures/Graceless-sig
  semantics/runtime/environment
  semantics/runtime/store
  semantics/values

signature
  arrows
    Term --> Value
    RTerm --> Value
    Arguments --> Values

rules

  // Objects construct and allocate an object, then run the field declarations
  // as a series of assignments in the context of the object and its methods.
  Object(methods, decls) --> result
    where initObject(methods, decls) --> object;
          allocate(object) --> location;
          methodNames(object) --> names;
          bindMethods(location, names) --> E;
          declsToBody(location, decls, Ref(location)) --> ObjectBody(body);
          E, Self location |- body --> result.

  // Qualified requests execute their receiver and arguments to objects, then
  // run as a runtime request on the resulting location.
  Request(receiver, name : String, args) --> result
    where receiver --> Object(receiver');
          args --> Objects(args');
          RRequest(receiver', Name(name), args') --> result.

  // Unqualified requests resolve the method to a receiver, then proceed like a
  // qualified request.  We can't delegate directly to the rule above because
  // the resolved receiver is an object location, which isn't a valid Term.
  Request(name : String, args) --> result
    where resolveMethod(Name(name)) --> receiver;
          args --> Objects(args');
          RRequest(receiver, Name(name), args') --> result.

  // Like qualified requests, but with an Assign name and only one argument.
  AssignRequest(receiver, name : String, arg) --> result
    where receiver --> Object(receiver');
          arg --> Object(arg');
          RRequest(receiver', Assign(name), [arg']) --> result.

  // Like unqualified requests, but with an Assign name and only one argument.
  AssignRequest(name : String, arg) --> result
    where resolveMethod(Assign(name)) --> receiver;
          arg --> Object(arg');
          RRequest(receiver, Assign(name), [arg']) --> result.

  // Self is resolved by looking up the value stored in the environment.
  Self Self(self) |- Self() --> Object(self).

rules

  Term(term) --> result
    where term --> result.

  Ref(location) --> Object(location).

  RRequest(receiver, name, args) --> result
    where fetch(receiver) --> Methods(object);
          lookup(object, name) --> RMethod(_, params, RBody(decls, body));
          matchArgs(params, args) --> methods;
          concat(methods, declsToMethods(decls)) --> methods';
          allocate(Methods(methods')) --> context;
          bindMethods(receiver, names(object)) --> E;
          E |- bindMethods(context, names(methods')) --> E';
          E', Self receiver |- body --> result.

  RRequest(receiver, name, _) --> Error()
    where fetch(receiver) --> Methods(methods);
          lookup(methods, name) --> RMethod(_, _, Uninitialised()).

  Assign(into, field, assign, next) --> next'
    where into --> Object(into');
          assign --> Object(assign');
          setField(into', field, assign') --> S;
          next :: S --> next'.

rules

  NoArguments() --> Objects([]).
  Arguments([]) --> Objects([]).
  Arguments([term | terms]) --> Objects([location | locations])
    where term --> Object(location);
          Arguments(terms) --> Objects(locations).
  Arguments([term | _]) --> Errors()
    where term --> Error().
  Arguments([term | terms]) --> Errors()
    where term --> Object(_);
          Arguments(terms) --> Errors().
